{
  
  "0": {
    "title": "Configuration Reference",
    "content": "Configuration Reference . This reference is the default configuration values without the recommended configuration applied (which is done so by default if you use Symfony Flex) . Full bundle configuration reference: . silverback_api_component: website_name: ~ # Required table_prefix: _acb_ security: tokens: [] enabled_components: form: true collection: true user: class_name: ~ # Required email_verification: enabled: true email: redirect_path_query: ~ default_redirect_path: ~ # Required subject: &#39;&#39; default_value: ~ # Required verify_on_change: ~ # Required verify_on_register: ~ # Required deny_unverified_login: ~ # Required password_reset: email: redirect_path_query: ~ default_redirect_path: ~ # Required subject: &#39;&#39; repeat_ttl_seconds: 8600 request_timeout_seconds: 3600 emails: welcome: enabled: true subject: &#39;Welcome to &#39; user_enabled: enabled: true subject: &#39;Your account has been enabled&#39; username_changed: enabled: true subject: &#39;Your username has been updated&#39; password_changed: enabled: true subject: &#39;Your password has been changed&#39; .",
    "url": "http://localhost:4000/configuration-reference/configuration-reference/",
    "relUrl": "/configuration-reference/configuration-reference/"
  }
  ,"1": {
    "title": "Email Address Verification",
    "content": "Email Address Verification .",
    "url": "http://localhost:4000/security-and-users/email-address-verification/",
    "relUrl": "/security-and-users/email-address-verification/"
  }
  ,"2": {
    "title": "Components",
    "content": "Components . All component resource endpoints are prefixed /component (e.g. /components/forms/{id}) . Collection (docs coming soon) | Form (docs coming soon) | Creating your own components | . Creating your own components . Extending AbstractComponent | Implementing Publishable | Implementing FileInterface and FileTrait (should probably refactor to work similar to Publishable) | Implementing TimestampedInterface and TimestampedTrait (should probably refactor to work similar to Publishable) | . Reusable traits . ComponentGroupsTrait (docs coming soon) | .",
    "url": "http://localhost:4000/resources/components/",
    "relUrl": "/resources/components/"
  }
  ,"3": {
    "title": "Home",
    "content": "API Component Bundle Documentation . Introduction . This bundle provides an extremely flexible API with functionality to provide the data structure and functionality for front-end web applications. With this bundle you can build website data by defining re-usable components for the front-end web application and define everything you would need to create a fully-featured website including an intuitive CMS. . We build this bundle ‘on the shoulders of giants’ with large and active communities, and will not be reinventing anything which has already been created in the fantastic packages we use. The core packages we are using are Symfony, Doctrine and API Platform. The teams behind these are fantastic, be sure to buy them a beer if you ever bump into anyone involved! :beers: . Want a free and easy way to show your thanks for packages you use? Use the symfony/thanks - share the love :heart: . There is also a front-end application in development to accompany this bundle, and when complete it will demonstrate the wide range of benefits this will provide. . Table of Contents . Installation | Users &amp; Security Emails | . | Resources Core resources | Component resources | . | Configuration reference | .",
    "url": "http://localhost:4000/",
    "relUrl": "/"
  }
  ,"4": {
    "title": "Resources",
    "content": "Resources . This bundle includes final resources and abstract classes for you to extend when making your own. .",
    "url": "http://localhost:4000/resources/",
    "relUrl": "/resources/"
  }
  ,"5": {
    "title": "Security & Users",
    "content": "Security &amp; Users . Types of authentication . JWT Tokens for Users . This bundle uses LexikJWTAuthenticationBundle and JWTRefreshTokenBundle to provide an authentication method for users. . Because refresh tokens have the potential for a long lifetime, developers should ensure that strict storage requirements are in place to keep them from being leaked. For example, on web applications, refresh tokens should only leave the backend when being sent to the authorization server, and the backend should be secure. The client secret should be protected in a similar fashion. Mobile applications do not require a client secret, but they should still be sure to store refresh tokens somewhere only the client application can access. . (Source: https://auth0.com/learn/refresh-tokens/) . API Tokens for Applications . We also use a simple API Token Authenticator Silverback ApiComponentBundle Security TokenAuthenticator so that endpoints which expose sensitive data can be secured. Primarily this is so that JWT Refresh tokens are not passed directly to users. . Getting started . Configure security and firewalls . As described here - generate the keys for JWTs. (You fill find the passphrase that has been generated in your environment variables by the flex recipe for LexikJWTAuthenticationBundle) . mkdir -p config/jwt openssl genpkey -out config/jwt/private.pem -aes256 -algorithm rsa -pkeyopt rsa_keygen_bits:4096 openssl pkey -in config/jwt/private.pem -out config/jwt/public.pem -pubout . Configure JWTRefreshTokenBundle: . # /config/packages/gesdinet_jwt_refresh_token.yaml gesdinet_jwt_refresh_token: # 30 day ttl: 2592000 user_identity_field: username firewall: main user_provider: &#39;security.user.provider.concrete.user_provider&#39; . # /config/routes/gesdinet_jwt_refresh_token.yaml gesdinet_jwt_refresh_token: path: /token/refresh defaults: { _controller: gesdinet.jwtrefreshtoken:refresh } . The above configurations are a bit different to those that will be added by Symfony Flex for the package. The user_provider must use the database for us to retain the user’s roles. For our purposes, the route does not need the /api prefix. . Configure your security/firewall: . # /config/packages/security.yaml security: role_hierarchy: ROLE_ADMIN: ROLE_USER ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH] encoders: Silverback ApiComponentBundle Entity User AbstractUser: algorithm: auto providers: user_provider: entity: class: Silverback ApiComponentBundle Entity User AbstractUser jwt: lexik_jwt: class: Silverback ApiComponentBundle Entity User AbstractUser firewalls: dev: pattern: ^/(_(profiler|wdt)|css|images|js)/ security: false refresh: pattern: ^/token/refresh stateless: true anonymous: true login: pattern: ^/login stateless: true # anonymous: true provider: user_provider user_checker: Silverback ApiComponentBundle Security UserChecker guard: authenticators: - Silverback ApiComponentBundle Security TokenAuthenticator json_login: check_path: /login success_handler: lexik_jwt_authentication.handler.authentication_success failure_handler: lexik_jwt_authentication.handler.authentication_failure main: pattern: ^/ stateless: true anonymous: true provider: jwt guard: authenticators: - lexik_jwt_authentication.jwt_token_authenticator # https://symfony.com/doc/current/security/impersonating_user.html switch_user: true access_control: - { path: ^/login, roles: ROLE_TOKEN_USER } - { path: ^/token/refresh, roles: IS_AUTHENTICATED_ANONYMOUSLY } - { path: ^/password/reset, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST] } - { path: ^/component/forms/(.*)/submit, roles: IS_AUTHENTICATED_ANONYMOUSLY, methods: [POST, PATCH] } - { path: ^/, roles: IS_AUTHENTICATED_FULLY, methods: [POST, PUT, PATCH, DELETE] } . Token Authentication . As part of the Symfony Flex recipe, an environment variable API_SECRET_TOKEN will be generated and by default used in the bundle configuration: . silverback_api_component: security: tokens: - &#39;%env(API_SECRET_TOKEN)%&#39; . JWT Authentication . By using the flex recipe, you will already have a pre-configured App Entity User entity in your project. . By default, although there is a column for the username and one for the email address in the database, these are kept synchronised by the User class. You can modify the class to suit your needs. Just be sure to extend the class Silverback ApiComponentBundle Entity User AbstractUser. . The repository automatically configured for your User entity will look up users by their email address or username properties. . If you do not use Flex, or you create a difference User class you must configure this in the bundle: . silverback_api_component: user: class_name: App Entity User .",
    "url": "http://localhost:4000/security-and-users/",
    "relUrl": "/security-and-users/"
  }
  ,"6": {
    "title": "Core resources",
    "content": "Core resources . Final core resources . All the final core resource endpoints are prefixed /_/ (e.g. /_/routes/{id}) . Route (docs coming soon) | Layout (docs coming soon) | PageTemplate (docs coming soon) | ComponentGroup (docs coming soon) | ComponentLocation (docs coming soon) | . Abstract core resources . AbstractPageData (docs coming soon) All resources extending AbstractPageData are prefixed with /page_data (e.g. /page_data/article_page/{id}) . | .",
    "url": "http://localhost:4000/resources/core/",
    "relUrl": "/resources/core/"
  }
  ,"7": {
    "title": "Installation",
    "content": "Install API Component Bundle . We encourage using as many of the packages as possible that are well maintained by large and active communities. Therefore, let’s start with the most up to date API Platform files and then install this bundle on top. . In the future, we will be creating a standard package you will be able to use for installing ACB instead of needing to follow these instructions. For now, we want to just focus on getting this bundle working well without the additional repository to maintain. . Download API Platform files from GitHub as described in their ‘Getting Started’ instructions | Delete the folders /client and /admin - we do not need these | Remove the client and admin configurations from the /docker-compose.yaml file | Update the api/Dockerfile Change PHP version to at least 7.4 | Remove --with-libzip if present | Add COPY assets assets/ beneath COPY src src/ | Add exif and xsl to the docker-php-ext-install arguments (exif is to determine whether files are images and xsl is for the Inky extension working with emails using Symfony Mailer) | Add libxslt-dev to apk add --no-cache --virtual .build-deps (required to install xsl) | For LiipImagineBundle Support Add to apk add --no-cache --virtual .build-deps command the packages libpng-dev, libjpeg-turbo-dev and freetype-dev | Add the following to include gd docker-php-ext-configure gd --with-freetype --with-jpeg | Add or modify to include gd docker-php-ext-install gd | . | . | Start up the containers | run docker-compose exec php sh to bash into the php container | run composer require silverbackis/api-component-bundle:2.x-dev | . Be sure to run the recipe for this bundle or take a look at all the files and configurations in the repository that would normally have been executed if the recipe had been executed. .",
    "url": "http://localhost:4000/installation/",
    "relUrl": "/installation/"
  }
  ,"8": {
    "title": "User Login",
    "content": "User Login . Because the login process serves a JWT Refresh token, this must be done by your front-end server-side application and authenticated using an API Token. . Login Form . You can create a Form component which references a pre-configured Symfony Form for logins Silverback ApiComponentBundle Form Type User UserLoginType. This adds a hidden field _action which is an absolute URL to the API’s login endpoint for JWT authentication. It also has a some defaults set on the form that your front-end application can read: . [ &#39;attr&#39; =&gt; [ &#39;id&#39; =&gt; &#39;login_form&#39;, &#39;novalidate&#39; =&gt; &#39;novalidate&#39;, ], &#39;action&#39; =&gt; &#39;/login&#39;, &#39;realtime_validate&#39; =&gt; false, &#39;api_request&#39; =&gt; false, ]; . The action is pre-set and will call your front end’s /login endpoint instead of calling the API because &#39;api_request&#39; =&gt; false. We also let the front-end application know that this form should not put in real-time verification requests with &#39;realtime_validate&#39; =&gt; false. A couple of HTML attributes are defined for your convenience too. . You can create this component as you would create any other form component, but it does require that you have not disabled the in-built form component. . silverback_api_component: enabled_components: form: true # &lt;-- this is the default value . It is the application’s responsibility to save the refresh token server-side and refresh the token when appropriate. . Using the refresh token . Take a look at the JWTRefreshTokenBundle documentation for the refresh token bundle to ensure you have configured everything correctly to allow your front-end application to refresh the token. Also ensure you have setup the bundle’s parameters as described in Security &amp; Users &gt; Getting Started .",
    "url": "http://localhost:4000/security-and-users/login/",
    "relUrl": "/security-and-users/login/"
  }
  ,"9": {
    "title": "Notification Emails",
    "content": "Notification Emails . . Welcome | User Enabled | Password Changed | Username Changed | . Welcome . User Enabled . Password Changed . Username Changed .",
    "url": "http://localhost:4000/security-and-users/notification-emails/",
    "relUrl": "/security-and-users/notification-emails/"
  }
  ,"10": {
    "title": "Password Reset",
    "content": "Password Reset .",
    "url": "http://localhost:4000/security-and-users/password-reset/",
    "relUrl": "/security-and-users/password-reset/"
  }
  ,"11": {
    "title": "Register",
    "content": "Register .",
    "url": "http://localhost:4000/security-and-users/register/",
    "relUrl": "/security-and-users/register/"
  }
  
}